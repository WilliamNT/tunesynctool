/* tslint:disable */
/* eslint-disable */
/**
 * tunesynctool web API
 * Web API wrapper for the tunesynctool Python package with some extra features.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CollectionPlaylistTaskStatus } from '../models';
// @ts-ignore
import type { HTTPValidationError } from '../models';
// @ts-ignore
import type { PlaylistTaskCreate } from '../models';
// @ts-ignore
import type { PlaylistTaskStatus } from '../models';
// @ts-ignore
import type { TrackMatchCreate } from '../models';
// @ts-ignore
import type { TrackRead } from '../models';
/**
 * TasksApi - axios parameter creator
 * @export
 */
export const TasksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Cancels the specified task. Users can only cancel their own tasks.  It may take a few seconds for the background workers to honor this request.
         * @summary Manually cancel a task
         * @param {string} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelTask: async (taskId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('cancelTask', 'taskId', taskId)
            const localVarPath = `/api/tasks/{task_id}`
                .replace(`{${"task_id"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all tasks belonging to the authenticated user, regardless of if they are running, in queue, or finished. The only exception is deleted tasks, for obvious reasons.
         * @summary List all tasks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTasks: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/tasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Matches a track based on the provided metadata. Finding a match is not 100% guaranteed.  **This can take anywhere from a few seconds to up to half a minute in extreme cases.**  Notes: - The metadata provided is **not** used to populate the returned data. - The returned data is the closest match found by an automated search algorithm, not 100% guaranteed to be the same track. - The returned data may be a different version of the same track (e.g. live version, remix, etc.). - Do your own client-side validation to ensure the returned track is what you or your users expect.
         * @summary Find the equivalent track on another provider
         * @param {string} provider Name of the provider to search with.
         * @param {TrackMatchCreate} trackMatchCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchTrack: async (provider: string, trackMatchCreate: TrackMatchCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'provider' is not null or undefined
            assertParamExists('matchTrack', 'provider', provider)
            // verify required parameter 'trackMatchCreate' is not null or undefined
            assertParamExists('matchTrack', 'trackMatchCreate', trackMatchCreate)
            const localVarPath = `/api/tasks/match`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

            if (provider !== undefined) {
                localVarQueryParameter['provider'] = provider;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(trackMatchCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Attempts to transfer the specified playlist from the source provider to the target provider. Replication is not guaranteed to be 100% successful.  This starts a long running task. Clients can poll for the progress of the transfer.
         * @summary Transfer a playlist to another provider
         * @param {PlaylistTaskCreate} playlistTaskCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferPlaylist: async (playlistTaskCreate: PlaylistTaskCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playlistTaskCreate' is not null or undefined
            assertParamExists('transferPlaylist', 'playlistTaskCreate', playlistTaskCreate)
            const localVarPath = `/api/tasks/transfer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(playlistTaskCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TasksApi - functional programming interface
 * @export
 */
export const TasksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TasksApiAxiosParamCreator(configuration)
    return {
        /**
         * Cancels the specified task. Users can only cancel their own tasks.  It may take a few seconds for the background workers to honor this request.
         * @summary Manually cancel a task
         * @param {string} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelTask(taskId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelTask(taskId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TasksApi.cancelTask']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns all tasks belonging to the authenticated user, regardless of if they are running, in queue, or finished. The only exception is deleted tasks, for obvious reasons.
         * @summary List all tasks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTasks(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionPlaylistTaskStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTasks(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TasksApi.getTasks']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Matches a track based on the provided metadata. Finding a match is not 100% guaranteed.  **This can take anywhere from a few seconds to up to half a minute in extreme cases.**  Notes: - The metadata provided is **not** used to populate the returned data. - The returned data is the closest match found by an automated search algorithm, not 100% guaranteed to be the same track. - The returned data may be a different version of the same track (e.g. live version, remix, etc.). - Do your own client-side validation to ensure the returned track is what you or your users expect.
         * @summary Find the equivalent track on another provider
         * @param {string} provider Name of the provider to search with.
         * @param {TrackMatchCreate} trackMatchCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async matchTrack(provider: string, trackMatchCreate: TrackMatchCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrackRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.matchTrack(provider, trackMatchCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TasksApi.matchTrack']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Attempts to transfer the specified playlist from the source provider to the target provider. Replication is not guaranteed to be 100% successful.  This starts a long running task. Clients can poll for the progress of the transfer.
         * @summary Transfer a playlist to another provider
         * @param {PlaylistTaskCreate} playlistTaskCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferPlaylist(playlistTaskCreate: PlaylistTaskCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlaylistTaskStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferPlaylist(playlistTaskCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TasksApi.transferPlaylist']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TasksApi - factory interface
 * @export
 */
export const TasksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TasksApiFp(configuration)
    return {
        /**
         * Cancels the specified task. Users can only cancel their own tasks.  It may take a few seconds for the background workers to honor this request.
         * @summary Manually cancel a task
         * @param {string} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelTask(taskId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cancelTask(taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all tasks belonging to the authenticated user, regardless of if they are running, in queue, or finished. The only exception is deleted tasks, for obvious reasons.
         * @summary List all tasks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTasks(options?: RawAxiosRequestConfig): AxiosPromise<CollectionPlaylistTaskStatus> {
            return localVarFp.getTasks(options).then((request) => request(axios, basePath));
        },
        /**
         * Matches a track based on the provided metadata. Finding a match is not 100% guaranteed.  **This can take anywhere from a few seconds to up to half a minute in extreme cases.**  Notes: - The metadata provided is **not** used to populate the returned data. - The returned data is the closest match found by an automated search algorithm, not 100% guaranteed to be the same track. - The returned data may be a different version of the same track (e.g. live version, remix, etc.). - Do your own client-side validation to ensure the returned track is what you or your users expect.
         * @summary Find the equivalent track on another provider
         * @param {string} provider Name of the provider to search with.
         * @param {TrackMatchCreate} trackMatchCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchTrack(provider: string, trackMatchCreate: TrackMatchCreate, options?: RawAxiosRequestConfig): AxiosPromise<TrackRead> {
            return localVarFp.matchTrack(provider, trackMatchCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Attempts to transfer the specified playlist from the source provider to the target provider. Replication is not guaranteed to be 100% successful.  This starts a long running task. Clients can poll for the progress of the transfer.
         * @summary Transfer a playlist to another provider
         * @param {PlaylistTaskCreate} playlistTaskCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferPlaylist(playlistTaskCreate: PlaylistTaskCreate, options?: RawAxiosRequestConfig): AxiosPromise<PlaylistTaskStatus> {
            return localVarFp.transferPlaylist(playlistTaskCreate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TasksApi - interface
 * @export
 * @interface TasksApi
 */
export interface TasksApiInterface {
    /**
     * Cancels the specified task. Users can only cancel their own tasks.  It may take a few seconds for the background workers to honor this request.
     * @summary Manually cancel a task
     * @param {string} taskId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiInterface
     */
    cancelTask(taskId: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Returns all tasks belonging to the authenticated user, regardless of if they are running, in queue, or finished. The only exception is deleted tasks, for obvious reasons.
     * @summary List all tasks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiInterface
     */
    getTasks(options?: RawAxiosRequestConfig): AxiosPromise<CollectionPlaylistTaskStatus>;

    /**
     * Matches a track based on the provided metadata. Finding a match is not 100% guaranteed.  **This can take anywhere from a few seconds to up to half a minute in extreme cases.**  Notes: - The metadata provided is **not** used to populate the returned data. - The returned data is the closest match found by an automated search algorithm, not 100% guaranteed to be the same track. - The returned data may be a different version of the same track (e.g. live version, remix, etc.). - Do your own client-side validation to ensure the returned track is what you or your users expect.
     * @summary Find the equivalent track on another provider
     * @param {string} provider Name of the provider to search with.
     * @param {TrackMatchCreate} trackMatchCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiInterface
     */
    matchTrack(provider: string, trackMatchCreate: TrackMatchCreate, options?: RawAxiosRequestConfig): AxiosPromise<TrackRead>;

    /**
     * Attempts to transfer the specified playlist from the source provider to the target provider. Replication is not guaranteed to be 100% successful.  This starts a long running task. Clients can poll for the progress of the transfer.
     * @summary Transfer a playlist to another provider
     * @param {PlaylistTaskCreate} playlistTaskCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiInterface
     */
    transferPlaylist(playlistTaskCreate: PlaylistTaskCreate, options?: RawAxiosRequestConfig): AxiosPromise<PlaylistTaskStatus>;

}

/**
 * TasksApi - object-oriented interface
 * @export
 * @class TasksApi
 * @extends {BaseAPI}
 */
export class TasksApi extends BaseAPI implements TasksApiInterface {
    /**
     * Cancels the specified task. Users can only cancel their own tasks.  It may take a few seconds for the background workers to honor this request.
     * @summary Manually cancel a task
     * @param {string} taskId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public cancelTask(taskId: string, options?: RawAxiosRequestConfig) {
        return TasksApiFp(this.configuration).cancelTask(taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all tasks belonging to the authenticated user, regardless of if they are running, in queue, or finished. The only exception is deleted tasks, for obvious reasons.
     * @summary List all tasks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public getTasks(options?: RawAxiosRequestConfig) {
        return TasksApiFp(this.configuration).getTasks(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Matches a track based on the provided metadata. Finding a match is not 100% guaranteed.  **This can take anywhere from a few seconds to up to half a minute in extreme cases.**  Notes: - The metadata provided is **not** used to populate the returned data. - The returned data is the closest match found by an automated search algorithm, not 100% guaranteed to be the same track. - The returned data may be a different version of the same track (e.g. live version, remix, etc.). - Do your own client-side validation to ensure the returned track is what you or your users expect.
     * @summary Find the equivalent track on another provider
     * @param {string} provider Name of the provider to search with.
     * @param {TrackMatchCreate} trackMatchCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public matchTrack(provider: string, trackMatchCreate: TrackMatchCreate, options?: RawAxiosRequestConfig) {
        return TasksApiFp(this.configuration).matchTrack(provider, trackMatchCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Attempts to transfer the specified playlist from the source provider to the target provider. Replication is not guaranteed to be 100% successful.  This starts a long running task. Clients can poll for the progress of the transfer.
     * @summary Transfer a playlist to another provider
     * @param {PlaylistTaskCreate} playlistTaskCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public transferPlaylist(playlistTaskCreate: PlaylistTaskCreate, options?: RawAxiosRequestConfig) {
        return TasksApiFp(this.configuration).transferPlaylist(playlistTaskCreate, options).then((request) => request(this.axios, this.basePath));
    }
}

