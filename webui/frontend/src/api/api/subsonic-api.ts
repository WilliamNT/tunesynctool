/* tslint:disable */
/* eslint-disable */
/**
 * tunesynctool web API
 * Web API wrapper for the tunesynctool Python package with some extra features.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { HTTPValidationError } from '../models';
// @ts-ignore
import type { SubsonicCredentials } from '../models';
/**
 * SubsonicApi - axios parameter creator
 * @export
 */
export const SubsonicApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Allows the user to set their Subsonic credentials.
         * @summary Set the Subsonic credentials
         * @param {SubsonicCredentials} subsonicCredentials 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setSubsonicCredentials: async (subsonicCredentials: SubsonicCredentials, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subsonicCredentials' is not null or undefined
            assertParamExists('setSubsonicCredentials', 'subsonicCredentials', subsonicCredentials)
            const localVarPath = `/api/providers/subsonic/credentials`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(subsonicCredentials, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Unlinks the Subsonic account associated with the user.
         * @summary Unlink Subsonic
         * @param {string} provider 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unlinkSubsonicAccount: async (provider: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'provider' is not null or undefined
            assertParamExists('unlinkSubsonicAccount', 'provider', provider)
            const localVarPath = `/api/providers/subsonic/unlink`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

            if (provider !== undefined) {
                localVarQueryParameter['provider'] = provider;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SubsonicApi - functional programming interface
 * @export
 */
export const SubsonicApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SubsonicApiAxiosParamCreator(configuration)
    return {
        /**
         * Allows the user to set their Subsonic credentials.
         * @summary Set the Subsonic credentials
         * @param {SubsonicCredentials} subsonicCredentials 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setSubsonicCredentials(subsonicCredentials: SubsonicCredentials, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setSubsonicCredentials(subsonicCredentials, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubsonicApi.setSubsonicCredentials']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Unlinks the Subsonic account associated with the user.
         * @summary Unlink Subsonic
         * @param {string} provider 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unlinkSubsonicAccount(provider: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unlinkSubsonicAccount(provider, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubsonicApi.unlinkSubsonicAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SubsonicApi - factory interface
 * @export
 */
export const SubsonicApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SubsonicApiFp(configuration)
    return {
        /**
         * Allows the user to set their Subsonic credentials.
         * @summary Set the Subsonic credentials
         * @param {SubsonicCredentials} subsonicCredentials 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setSubsonicCredentials(subsonicCredentials: SubsonicCredentials, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.setSubsonicCredentials(subsonicCredentials, options).then((request) => request(axios, basePath));
        },
        /**
         * Unlinks the Subsonic account associated with the user.
         * @summary Unlink Subsonic
         * @param {string} provider 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unlinkSubsonicAccount(provider: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.unlinkSubsonicAccount(provider, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SubsonicApi - interface
 * @export
 * @interface SubsonicApi
 */
export interface SubsonicApiInterface {
    /**
     * Allows the user to set their Subsonic credentials.
     * @summary Set the Subsonic credentials
     * @param {SubsonicCredentials} subsonicCredentials 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubsonicApiInterface
     */
    setSubsonicCredentials(subsonicCredentials: SubsonicCredentials, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Unlinks the Subsonic account associated with the user.
     * @summary Unlink Subsonic
     * @param {string} provider 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubsonicApiInterface
     */
    unlinkSubsonicAccount(provider: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * SubsonicApi - object-oriented interface
 * @export
 * @class SubsonicApi
 * @extends {BaseAPI}
 */
export class SubsonicApi extends BaseAPI implements SubsonicApiInterface {
    /**
     * Allows the user to set their Subsonic credentials.
     * @summary Set the Subsonic credentials
     * @param {SubsonicCredentials} subsonicCredentials 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubsonicApi
     */
    public setSubsonicCredentials(subsonicCredentials: SubsonicCredentials, options?: RawAxiosRequestConfig) {
        return SubsonicApiFp(this.configuration).setSubsonicCredentials(subsonicCredentials, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Unlinks the Subsonic account associated with the user.
     * @summary Unlink Subsonic
     * @param {string} provider 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubsonicApi
     */
    public unlinkSubsonicAccount(provider: string, options?: RawAxiosRequestConfig) {
        return SubsonicApiFp(this.configuration).unlinkSubsonicAccount(provider, options).then((request) => request(this.axios, this.basePath));
    }
}

