/* tslint:disable */
/* eslint-disable */
/**
 * tunesynctool web API
 * Web API wrapper for the tunesynctool Python package with some extra features.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ARLCreate } from '../models';
// @ts-ignore
import type { HTTPValidationError } from '../models';
/**
 * DeezerApi - axios parameter creator
 * @export
 */
export const DeezerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Allows the user to set their Deezer ARL cookie.
         * @summary Set the Deezer ARL cookie
         * @param {ARLCreate} aRLCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setDeezerARL: async (aRLCreate: ARLCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'aRLCreate' is not null or undefined
            assertParamExists('setDeezerARL', 'aRLCreate', aRLCreate)
            const localVarPath = `/api/providers/deezer/arl`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(aRLCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Unlinks the Deezer account associated with the user.
         * @summary Unlink Deezer
         * @param {string} provider 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unlinkDeezerAccount: async (provider: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'provider' is not null or undefined
            assertParamExists('unlinkDeezerAccount', 'provider', provider)
            const localVarPath = `/api/providers/deezer/unlink`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

            if (provider !== undefined) {
                localVarQueryParameter['provider'] = provider;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DeezerApi - functional programming interface
 * @export
 */
export const DeezerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DeezerApiAxiosParamCreator(configuration)
    return {
        /**
         * Allows the user to set their Deezer ARL cookie.
         * @summary Set the Deezer ARL cookie
         * @param {ARLCreate} aRLCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setDeezerARL(aRLCreate: ARLCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setDeezerARL(aRLCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DeezerApi.setDeezerARL']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Unlinks the Deezer account associated with the user.
         * @summary Unlink Deezer
         * @param {string} provider 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unlinkDeezerAccount(provider: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unlinkDeezerAccount(provider, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DeezerApi.unlinkDeezerAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DeezerApi - factory interface
 * @export
 */
export const DeezerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DeezerApiFp(configuration)
    return {
        /**
         * Allows the user to set their Deezer ARL cookie.
         * @summary Set the Deezer ARL cookie
         * @param {ARLCreate} aRLCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setDeezerARL(aRLCreate: ARLCreate, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.setDeezerARL(aRLCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Unlinks the Deezer account associated with the user.
         * @summary Unlink Deezer
         * @param {string} provider 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unlinkDeezerAccount(provider: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.unlinkDeezerAccount(provider, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DeezerApi - interface
 * @export
 * @interface DeezerApi
 */
export interface DeezerApiInterface {
    /**
     * Allows the user to set their Deezer ARL cookie.
     * @summary Set the Deezer ARL cookie
     * @param {ARLCreate} aRLCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeezerApiInterface
     */
    setDeezerARL(aRLCreate: ARLCreate, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Unlinks the Deezer account associated with the user.
     * @summary Unlink Deezer
     * @param {string} provider 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeezerApiInterface
     */
    unlinkDeezerAccount(provider: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * DeezerApi - object-oriented interface
 * @export
 * @class DeezerApi
 * @extends {BaseAPI}
 */
export class DeezerApi extends BaseAPI implements DeezerApiInterface {
    /**
     * Allows the user to set their Deezer ARL cookie.
     * @summary Set the Deezer ARL cookie
     * @param {ARLCreate} aRLCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeezerApi
     */
    public setDeezerARL(aRLCreate: ARLCreate, options?: RawAxiosRequestConfig) {
        return DeezerApiFp(this.configuration).setDeezerARL(aRLCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Unlinks the Deezer account associated with the user.
     * @summary Unlink Deezer
     * @param {string} provider 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeezerApi
     */
    public unlinkDeezerAccount(provider: string, options?: RawAxiosRequestConfig) {
        return DeezerApiFp(this.configuration).unlinkDeezerAccount(provider, options).then((request) => request(this.axios, this.basePath));
    }
}

