/* tslint:disable */
/* eslint-disable */
/**
 * tunesynctool web API
 * Web API wrapper for the tunesynctool Python package with some extra features.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AccessToken } from '../models';
// @ts-ignore
import type { CollectionProviderRead } from '../models';
// @ts-ignore
import type { HTTPValidationError } from '../models';
// @ts-ignore
import type { OAuth2StateCreate } from '../models';
/**
 * ProvidersApi - axios parameter creator
 * @export
 */
export const ProvidersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Generates a signed state to be used for OAuth2 authentication flows.  This is required for providers that users can link by going through an OAuth2 flow.
         * @summary Generate a state for the provider
         * @param {string} providerName 
         * @param {OAuth2StateCreate} oAuth2StateCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateProviderState: async (providerName: string, oAuth2StateCreate: OAuth2StateCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'providerName' is not null or undefined
            assertParamExists('generateProviderState', 'providerName', providerName)
            // verify required parameter 'oAuth2StateCreate' is not null or undefined
            assertParamExists('generateProviderState', 'oAuth2StateCreate', oAuth2StateCreate)
            const localVarPath = `/api/providers/{provider_name}/state`
                .replace(`{${"provider_name"}}`, encodeURIComponent(String(providerName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(oAuth2StateCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all accepted provider names that clients can set in the `?provider=` query parameter across endpoints.  An example use of this endpoint would be to populate a dropdown list in the client UI in a search field.
         * @summary Get the list of all accepted provider names
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getValidProviderNames: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/providers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProvidersApi - functional programming interface
 * @export
 */
export const ProvidersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProvidersApiAxiosParamCreator(configuration)
    return {
        /**
         * Generates a signed state to be used for OAuth2 authentication flows.  This is required for providers that users can link by going through an OAuth2 flow.
         * @summary Generate a state for the provider
         * @param {string} providerName 
         * @param {OAuth2StateCreate} oAuth2StateCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateProviderState(providerName: string, oAuth2StateCreate: OAuth2StateCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessToken>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateProviderState(providerName, oAuth2StateCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProvidersApi.generateProviderState']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a list of all accepted provider names that clients can set in the `?provider=` query parameter across endpoints.  An example use of this endpoint would be to populate a dropdown list in the client UI in a search field.
         * @summary Get the list of all accepted provider names
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getValidProviderNames(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionProviderRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getValidProviderNames(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProvidersApi.getValidProviderNames']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProvidersApi - factory interface
 * @export
 */
export const ProvidersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProvidersApiFp(configuration)
    return {
        /**
         * Generates a signed state to be used for OAuth2 authentication flows.  This is required for providers that users can link by going through an OAuth2 flow.
         * @summary Generate a state for the provider
         * @param {string} providerName 
         * @param {OAuth2StateCreate} oAuth2StateCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateProviderState(providerName: string, oAuth2StateCreate: OAuth2StateCreate, options?: RawAxiosRequestConfig): AxiosPromise<AccessToken> {
            return localVarFp.generateProviderState(providerName, oAuth2StateCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all accepted provider names that clients can set in the `?provider=` query parameter across endpoints.  An example use of this endpoint would be to populate a dropdown list in the client UI in a search field.
         * @summary Get the list of all accepted provider names
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getValidProviderNames(options?: RawAxiosRequestConfig): AxiosPromise<CollectionProviderRead> {
            return localVarFp.getValidProviderNames(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProvidersApi - interface
 * @export
 * @interface ProvidersApi
 */
export interface ProvidersApiInterface {
    /**
     * Generates a signed state to be used for OAuth2 authentication flows.  This is required for providers that users can link by going through an OAuth2 flow.
     * @summary Generate a state for the provider
     * @param {string} providerName 
     * @param {OAuth2StateCreate} oAuth2StateCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvidersApiInterface
     */
    generateProviderState(providerName: string, oAuth2StateCreate: OAuth2StateCreate, options?: RawAxiosRequestConfig): AxiosPromise<AccessToken>;

    /**
     * Returns a list of all accepted provider names that clients can set in the `?provider=` query parameter across endpoints.  An example use of this endpoint would be to populate a dropdown list in the client UI in a search field.
     * @summary Get the list of all accepted provider names
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvidersApiInterface
     */
    getValidProviderNames(options?: RawAxiosRequestConfig): AxiosPromise<CollectionProviderRead>;

}

/**
 * ProvidersApi - object-oriented interface
 * @export
 * @class ProvidersApi
 * @extends {BaseAPI}
 */
export class ProvidersApi extends BaseAPI implements ProvidersApiInterface {
    /**
     * Generates a signed state to be used for OAuth2 authentication flows.  This is required for providers that users can link by going through an OAuth2 flow.
     * @summary Generate a state for the provider
     * @param {string} providerName 
     * @param {OAuth2StateCreate} oAuth2StateCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvidersApi
     */
    public generateProviderState(providerName: string, oAuth2StateCreate: OAuth2StateCreate, options?: RawAxiosRequestConfig) {
        return ProvidersApiFp(this.configuration).generateProviderState(providerName, oAuth2StateCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all accepted provider names that clients can set in the `?provider=` query parameter across endpoints.  An example use of this endpoint would be to populate a dropdown list in the client UI in a search field.
     * @summary Get the list of all accepted provider names
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvidersApi
     */
    public getValidProviderNames(options?: RawAxiosRequestConfig) {
        return ProvidersApiFp(this.configuration).getValidProviderNames(options).then((request) => request(this.axios, this.basePath));
    }
}

