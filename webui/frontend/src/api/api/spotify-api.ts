/* tslint:disable */
/* eslint-disable */
/**
 * tunesynctool web API
 * Web API wrapper for the tunesynctool Python package with some extra features.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { HTTPValidationError } from '../models';
/**
 * SpotifyApi - axios parameter creator
 * @export
 */
export const SpotifyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Starts the Spotify Authorization Code Flow. Redirects the user to the Spotify authorization page. The user will be asked to log in and authorize the application.  Details: https://developer.spotify.com/documentation/web-api/tutorials/code-flow  Takes a `state` parameter that includes metadata about the client.
         * @summary Start the Spotify Authorization Code Flow
         * @param {string} state 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signInWithSpotify: async (state: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'state' is not null or undefined
            assertParamExists('signInWithSpotify', 'state', state)
            const localVarPath = `/api/providers/spotify/authorize`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Unlinks the Spotify account associated with the user.
         * @summary Unlink Spotify
         * @param {string} provider 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unlinkSpotifyAccount: async (provider: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'provider' is not null or undefined
            assertParamExists('unlinkSpotifyAccount', 'provider', provider)
            const localVarPath = `/api/providers/spotify/unlink`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

            if (provider !== undefined) {
                localVarQueryParameter['provider'] = provider;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SpotifyApi - functional programming interface
 * @export
 */
export const SpotifyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SpotifyApiAxiosParamCreator(configuration)
    return {
        /**
         * Starts the Spotify Authorization Code Flow. Redirects the user to the Spotify authorization page. The user will be asked to log in and authorize the application.  Details: https://developer.spotify.com/documentation/web-api/tutorials/code-flow  Takes a `state` parameter that includes metadata about the client.
         * @summary Start the Spotify Authorization Code Flow
         * @param {string} state 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signInWithSpotify(state: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signInWithSpotify(state, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpotifyApi.signInWithSpotify']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Unlinks the Spotify account associated with the user.
         * @summary Unlink Spotify
         * @param {string} provider 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unlinkSpotifyAccount(provider: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unlinkSpotifyAccount(provider, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpotifyApi.unlinkSpotifyAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SpotifyApi - factory interface
 * @export
 */
export const SpotifyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SpotifyApiFp(configuration)
    return {
        /**
         * Starts the Spotify Authorization Code Flow. Redirects the user to the Spotify authorization page. The user will be asked to log in and authorize the application.  Details: https://developer.spotify.com/documentation/web-api/tutorials/code-flow  Takes a `state` parameter that includes metadata about the client.
         * @summary Start the Spotify Authorization Code Flow
         * @param {string} state 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signInWithSpotify(state: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.signInWithSpotify(state, options).then((request) => request(axios, basePath));
        },
        /**
         * Unlinks the Spotify account associated with the user.
         * @summary Unlink Spotify
         * @param {string} provider 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unlinkSpotifyAccount(provider: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.unlinkSpotifyAccount(provider, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SpotifyApi - interface
 * @export
 * @interface SpotifyApi
 */
export interface SpotifyApiInterface {
    /**
     * Starts the Spotify Authorization Code Flow. Redirects the user to the Spotify authorization page. The user will be asked to log in and authorize the application.  Details: https://developer.spotify.com/documentation/web-api/tutorials/code-flow  Takes a `state` parameter that includes metadata about the client.
     * @summary Start the Spotify Authorization Code Flow
     * @param {string} state 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpotifyApiInterface
     */
    signInWithSpotify(state: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Unlinks the Spotify account associated with the user.
     * @summary Unlink Spotify
     * @param {string} provider 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpotifyApiInterface
     */
    unlinkSpotifyAccount(provider: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * SpotifyApi - object-oriented interface
 * @export
 * @class SpotifyApi
 * @extends {BaseAPI}
 */
export class SpotifyApi extends BaseAPI implements SpotifyApiInterface {
    /**
     * Starts the Spotify Authorization Code Flow. Redirects the user to the Spotify authorization page. The user will be asked to log in and authorize the application.  Details: https://developer.spotify.com/documentation/web-api/tutorials/code-flow  Takes a `state` parameter that includes metadata about the client.
     * @summary Start the Spotify Authorization Code Flow
     * @param {string} state 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpotifyApi
     */
    public signInWithSpotify(state: string, options?: RawAxiosRequestConfig) {
        return SpotifyApiFp(this.configuration).signInWithSpotify(state, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Unlinks the Spotify account associated with the user.
     * @summary Unlink Spotify
     * @param {string} provider 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpotifyApi
     */
    public unlinkSpotifyAccount(provider: string, options?: RawAxiosRequestConfig) {
        return SpotifyApiFp(this.configuration).unlinkSpotifyAccount(provider, options).then((request) => request(this.axios, this.basePath));
    }
}

